31) Building Reusable Formik Control ( File:- FormikContainer.js)
==============================================

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'

function FormikContainer () {

  const initialValues = {}
  const validationSchema = Yup.object({})
  const onSubmit = values => {
    console.log('Form values', values)
  }

  return (
    <Formik
     initialValues={initialValues}
     validationSchema={validationSchema}
     onSubmit={onSubmit}
    >
      {
            (props) => {
                return <Form>
                    <button type='submit'> Submit </button>
                       </Form>
            }
        }
    </Formik>
  )
}

export default FormikContainer

----------------------------------------------------------------------------------------------------------------------------------------------

32) Formik Control Component ( File:- FormikControl.js)
============================================

import React from 'react'

function FormikControl (props) {
  const { control } = props

  switch (control) {
    case 'input':
    case 'textarea':
    case 'select':
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

---------------------------------------------------------------------------------------------------------------------------------------------

33) Input ( File:- Input.js / TextError.js )
=============================

TextError.js
----------------

import React from 'react'

function TextError(props) {
  return (
    <div className='error'>
        {props.children}
    </div>
  )
}

export default TextError

FormikContainer.js
-----------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const initialValues = {
    email: ''
  }
  const validationSchema = Yup.object({
    email: Yup.string().required('Required')
  })
  const onSubmit = values => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (props) => {
        return (
          <Form>
            <FormikControl
              type='email'
              name='email'
              label='Email'
              control='input'
            />
            
            <button type='submit'> Submit </button>
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default FormikContainer

FormikControl.js
--------------------

import React from 'react'
import Input from './Input'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
    case 'select':
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

input.js
-----------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from '../Components/TextError'

function Input (props) {

  const { label, name, ...rest } = props
  
  return (
    <div className='form-control'>
      <label htmlFor={name}> {label} </label>
      <Field id={name} name={name} {...rest} />
      <ErrorMessage name={name} component={TextError} />
    </div>
  )
}

export default Input

-----------------------------------------------------------------------------------------------------------------------------------------------------

34) TextArea ( File:- TextArea.js)
==========================

FormikContainer.js
-----------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const initialValues = {
    email: '',
    description:'',
  }
  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required')
  })
  const onSubmit = (values) => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (props) => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
            control='textarea'
            name='description'
            label='Description'
             />

            <button type='submit'> Submit </button>
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default FormikContainer

FormikControl
-----------------

import React from 'react'
import Input from './Input'
import TextArea from './TextArea'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

TextArea.js
----------------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from './TextError'

function TextArea (props) {

  const { label, name, ...rest } = props
  
  return (
    <div className='form-control'>
      <label htmlFor={name}> {label} </label>
      <Field as='textarea' id={name} name={name} {...rest} />
      <ErrorMessage name={name} component={TextError} />
    </div>
  )
}

export default TextArea

-----------------------------------------------------------------------------------------------------------------------------------------------------

35) Select ( File:- Select.js)
======================

FormikContainer.js
------------------------
import React from 'react'
import { Formik, Form, yupToFormErrors } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {

  const dropDownOptions = [
    { key: 'Select an option', value: '' },
    { key: 'option1', value: 'option1' },
    { key: 'option2', value: 'option2' },
    { key: 'option3', value: 'option3' }
  ]

  const initialValues = {
    email: '',
    description: '',
    selectOption: ''
  }

  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required'),
    selectOption: Yup.string().required('Required')
  })

  const onSubmit = (values) => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      {props => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='textarea'
              name='description'
              label='Description'
            />

            <FormikControl
            control='select'
            name='selectOption'
            label='Select a Topic'
            options={dropDownOptions}
            />

            <button type='submit'> Submit </button>
          </Form>
        )
      }}
    </Formik>
  )
}

export default FormikContainer

FormikControl.js
--------------------

import React from 'react'
import Input from './Input'
import Select from './Select'
import TextArea from './TextArea'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

Select.js
-----------

import React from 'react'
import { Field, ErrorMessage }  from 'formik'
import TextError from './TextError'

function Select(props) {
    const { label, name, options, ...rest} = props
  return (
    <div className='form-control'>
        <label htmlFor={name}> {label} </label>
        <Field as='select' id={name} name={name} {...rest}>
            {
                options.map((option) => {
                    return(
                        <option key={option.value} value={option.value}>
                            {option.key}
                        </option>
                    )
                })
            }
        </Field>

        <ErrorMessage name={name} component={TextError}/>

    </div>
  )
}

export default Select

---------------------------------------------------------------------------------------------------------------------------------------------

36) Radio Buttons ( File:- RadioButtons.js)
=============================================

Link = https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio

FormikContainer.js
------------------------

import React from 'react'
import { Formik, Form, yupToFormErrors } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const dropDownOptions = [
    { key: 'Select an option', value: '' },
    { key: 'option 1', value: 'option1' },
    { key: 'option 2', value: 'option2' },
    { key: 'option 3', value: 'option3' }
  ]

  const radioOptions = [
    { key: 'Option 1', value: 'rOption1' },
    { key: 'Option 2', value: 'rOption2' },
    { key: 'Option 3', value: 'rOption3' }
  ]

  const initialValues = {
    email: '',
    description: '',
    selectOption: '',
    radioOption: ''
  }

  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required'),
    selectOption: Yup.string().required('Required'),
    radioOption: Yup.string().required('Required')
  })

  const onSubmit = values => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      {props => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='textarea'
              name='description'
              label='Description'
            />

            <FormikControl
              control='select'
              name='selectOption'
              label='Select a Topic'
              options={dropDownOptions}
            />

            <FormikControl
            control='radio'
            name='radioOption'
            label='Radio Topic'
            options={radioOptions}
             />

            <button type='submit'> Submit </button>
          </Form>
        )
      }}
    </Formik>
  )
}

export default FormikContainer


FormikControl.js
----------------------

import React from 'react'
import Input from './Input'
import RadioButtons from './RadioButtons'
import Select from './Select'
import TextArea from './TextArea'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
      return <RadioButtons {...rest} />
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

RadioButtons.js
------------------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from './TextError'

function RadioButtons(props) {
    const { label, name, options, ...rest} = props
  return (
    <div className='form-control'>
        <label> {label} </label>
        <Field name={name} {...rest}>
            {
                (props) => {
                    const { field } = props
                    return options.map((option) => {
                        return(
                            <React.Fragment key={option.key}>
                                <input
                                 type='radio'
                                 id={option.value}
                                 {...field}
                                 value={option.value}
                                 checked={field.value === option.value}
                                  /> 

                                  <label htmlFor={option.value}>
                                       {option.key}
                                  </label>

                            </React.Fragment>
                        )
                    })
                }
            }
        </Field>
        <ErrorMessage name={name} component={TextError} />

    </div>
  )
}

export default RadioButtons

------------------------------------------------------------------------------------------------------------------------------------------------------







