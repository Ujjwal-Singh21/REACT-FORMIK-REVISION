31) Building Reusable Formik Control ( File:- FormikContainer.js)
==============================================

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'

function FormikContainer () {

  const initialValues = {}
  const validationSchema = Yup.object({})
  const onSubmit = values => {
    console.log('Form values', values)
  }

  return (
    <Formik
     initialValues={initialValues}
     validationSchema={validationSchema}
     onSubmit={onSubmit}
    >
      {
            (props) => {
                return <Form>
                    <button type='submit'> Submit </button>
                       </Form>
            }
        }
    </Formik>
  )
}

export default FormikContainer

----------------------------------------------------------------------------------------------------------------------------------------------

32) Formik Control Component ( File:- FormikControl.js)
============================================

import React from 'react'

function FormikControl (props) {
  const { control } = props

  switch (control) {
    case 'input':
    case 'textarea':
    case 'select':
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

---------------------------------------------------------------------------------------------------------------------------------------------

33) Input ( File:- Input.js / TextError.js )
=============================

TextError.js
----------------

import React from 'react'

function TextError(props) {
  return (
    <div className='error'>
        {props.children}
    </div>
  )
}

export default TextError

FormikContainer.js
-----------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const initialValues = {
    email: ''
  }
  const validationSchema = Yup.object({
    email: Yup.string().required('Required')
  })
  const onSubmit = values => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (props) => {
        return (
          <Form>
            <FormikControl
              type='email'
              name='email'
              label='Email'
              control='input'
            />
            
            <button type='submit'> Submit </button>
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default FormikContainer

FormikControl.js
--------------------

import React from 'react'
import Input from './Input'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
    case 'select':
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

input.js
-----------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from '../Components/TextError'

function Input (props) {

  const { label, name, ...rest } = props
  
  return (
    <div className='form-control'>
      <label htmlFor={name}> {label} </label>
      <Field id={name} name={name} {...rest} />
      <ErrorMessage name={name} component={TextError} />
    </div>
  )
}

export default Input

-----------------------------------------------------------------------------------------------------------------------------------------------------

34) TextArea ( File:- TextArea.js)
==========================

FormikContainer.js
-----------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const initialValues = {
    email: '',
    description:'',
  }
  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required')
  })
  const onSubmit = (values) => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (props) => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
            control='textarea'
            name='description'
            label='Description'
             />

            <button type='submit'> Submit </button>
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default FormikContainer

FormikControl
-----------------

import React from 'react'
import Input from './Input'
import TextArea from './TextArea'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

TextArea.js
----------------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from './TextError'

function TextArea (props) {

  const { label, name, ...rest } = props
  
  return (
    <div className='form-control'>
      <label htmlFor={name}> {label} </label>
      <Field as='textarea' id={name} name={name} {...rest} />
      <ErrorMessage name={name} component={TextError} />
    </div>
  )
}

export default TextArea

-----------------------------------------------------------------------------------------------------------------------------------------------------

35) Select ( File:- Select.js)
======================

FormikContainer.js
------------------------
import React from 'react'
import { Formik, Form, yupToFormErrors } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {

  const dropDownOptions = [
    { key: 'Select an option', value: '' },
    { key: 'option1', value: 'option1' },
    { key: 'option2', value: 'option2' },
    { key: 'option3', value: 'option3' }
  ]

  const initialValues = {
    email: '',
    description: '',
    selectOption: ''
  }

  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required'),
    selectOption: Yup.string().required('Required')
  })

  const onSubmit = (values) => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      {props => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='textarea'
              name='description'
              label='Description'
            />

            <FormikControl
            control='select'
            name='selectOption'
            label='Select a Topic'
            options={dropDownOptions}
            />

            <button type='submit'> Submit </button>
          </Form>
        )
      }}
    </Formik>
  )
}

export default FormikContainer

FormikControl.js
--------------------

import React from 'react'
import Input from './Input'
import Select from './Select'
import TextArea from './TextArea'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

Select.js
-----------

import React from 'react'
import { Field, ErrorMessage }  from 'formik'
import TextError from './TextError'

function Select(props) {
    const { label, name, options, ...rest} = props
  return (
    <div className='form-control'>
        <label htmlFor={name}> {label} </label>
        <Field as='select' id={name} name={name} {...rest}>
            {
                options.map((option) => {
                    return(
                        <option key={option.value} value={option.value}>
                            {option.key}
                        </option>
                    )
                })
            }
        </Field>

        <ErrorMessage name={name} component={TextError}/>

    </div>
  )
}

export default Select

---------------------------------------------------------------------------------------------------------------------------------------------

36) Radio Buttons ( File:- RadioButtons.js)
=============================

Link = https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio

FormikContainer.js
------------------------

import React from 'react'
import { Formik, Form, yupToFormErrors } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const dropDownOptions = [
    { key: 'Select an option', value: '' },
    { key: 'option 1', value: 'option1' },
    { key: 'option 2', value: 'option2' },
    { key: 'option 3', value: 'option3' }
  ]

  const radioOptions = [
    { key: 'Option 1', value: 'rOption1' },
    { key: 'Option 2', value: 'rOption2' },
    { key: 'Option 3', value: 'rOption3' }
  ]

  const initialValues = {
    email: '',
    description: '',
    selectOption: '',
    radioOption: ''
  }

  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required'),
    selectOption: Yup.string().required('Required'),
    radioOption: Yup.string().required('Required')
  })

  const onSubmit = values => {
    console.log('Form values', values)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      {props => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='textarea'
              name='description'
              label='Description'
            />

            <FormikControl
              control='select'
              name='selectOption'
              label='Select a Topic'
              options={dropDownOptions}
            />

            <FormikControl
            control='radio'
            name='radioOption'
            label='Radio Topic'
            options={radioOptions}
             />

            <button type='submit'> Submit </button>
          </Form>
        )
      }}
    </Formik>
  )
}

export default FormikContainer


FormikControl.js
----------------------

import React from 'react'
import Input from './Input'
import RadioButtons from './RadioButtons'
import Select from './Select'
import TextArea from './TextArea'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
      return <RadioButtons {...rest} />
    case 'checkbox':
    case 'date':
    default:
      return null
  }
}

export default FormikControl

RadioButtons.js
------------------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from './TextError'

function RadioButtons(props) {
    const { label, name, options, ...rest} = props
  return (
    <div className='form-control'>
        <label> {label} </label>
        <Field name={name} {...rest}>
            {
                (props) => {
                    const { field } = props
                    return options.map((option) => {
                        return(
                            <React.Fragment key={option.key}>
                                <input
                                 type='radio'
                                 id={option.value}
                                 {...field}
                                 value={option.value}
                                 checked={field.value === option.value}
                                  /> 

                                  <label htmlFor={option.value}>
                                       {option.key}
                                  </label>

                            </React.Fragment>
                        )
                    })
                }
            }
        </Field>
        <ErrorMessage name={name} component={TextError} />

    </div>
  )
}

export default RadioButtons

------------------------------------------------------------------------------------------------------------------------------------------------------

37) CheckBox Group ( File:- CheckBoxGroup.js)
==================================

FormikContainer.js
-----------------------

import React from 'react'
import { Formik, Form, yupToFormErrors } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const dropDownOptions = [
    { key: 'Select an option', value: '' },
    { key: 'option 1', value: 'option1' },
    { key: 'option 2', value: 'option2' },
    { key: 'option 3', value: 'option3' }
  ]

  const radioOptions = [
    { key: 'Option 1', value: 'rOption1' },
    { key: 'Option 2', value: 'rOption2' },
    { key: 'Option 3', value: 'rOption3' }
  ]

  const checkboxOptions = [
    { key: 'Option 1', value: 'cOption1' },
    { key: 'Option 2', value: 'cOption2' },
    { key: 'Option 3', value: 'cOption3' }
  ]

  const initialValues = {
    email: '',
    description: '',
    selectOption: '',
    radioOption: '',
    checkboxOption: [ ],
  }

  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required'),
    selectOption: Yup.string().required('Required'),
    radioOption: Yup.string().required('Required'),
    checkboxOption: Yup.array().min(1, 'Required'),
  })

  const onSubmit = (values) => {
    console.log('Form values', values)
    alert(`Form submitted successFully`)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (props) => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='textarea'
              name='description'
              label='Description'
            />

            <FormikControl
              control='select'
              name='selectOption'
              label='Select a Topic'
              options={dropDownOptions}
            />

            <FormikControl
              control='radio'
              name='radioOption'
              label='Radio Topic'
              options={radioOptions}
            />

            <FormikControl
              control='checkbox'
              name='checkboxOption'
              label='CheckBox Topics'
              options={checkboxOptions}
            />

            <button type='submit'> Submit </button>
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default FormikContainer

FormikControl.js
-----------------------

import React from 'react'
import Input from './Input'
import RadioButtons from './RadioButtons'
import Select from './Select'
import TextArea from './TextArea'
import CheckBoxGroup from './CheckBoxGroup'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
      return <RadioButtons {...rest} />
    case 'checkbox':
      return <CheckBoxGroup {...rest} />
    case 'date':
    default:
      return null
  }
}

export default FormikControl


CheckBoxGroup.js
----------------------

import React from 'react'
import { Field, ErrorMessage } from 'formik'
import TextError from './TextError'

function CheckBoxGroup (props) {
  const { label, name, options, ...rest } = props
  return (
    <div className='form-control'>
      <label> {label} </label>
      <Field name={name} {...rest}>
        {
                (props) => {
                    const { field } = props
                    return options.map((option) => {
                        return(
                            <React.Fragment key={option.key}>

                                <input
                                type='checkbox'
                                id={option.value}
                                {...field}
                                value={option.value}
                                checked = {field.value.includes(option.value)}
                                 />

                                 <label htmlFor={option.value}> {option.key} </label>

                            </React.Fragment>
                        )
                    })
                }
            }
      </Field>

      <ErrorMessage name={name} component={TextError} />
    </div>
  )
}

export default CheckBoxGroup


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

38) Date Picker ( File:- DatePicker.js)
===========================

(a) npm install react-datepicker

(b) we import 2 things :-
    (i) import DatePicker from ' react-datepicker ' 
        then for CSS we import
    (ii) import 'react-datepicker/dist/react-datepicker.css'

FormikContainer.js
-----------------------

import React from 'react'
import { Formik, Form, yupToFormErrors } from 'formik'
import * as Yup from 'yup'
import FormikControl from './FormikControl'

function FormikContainer () {
  const dropDownOptions = [
    { key: 'Select an option', value: '' },
    { key: 'option 1', value: 'option1' },
    { key: 'option 2', value: 'option2' },
    { key: 'option 3', value: 'option3' }
  ]

  const radioOptions = [
    { key: 'Option 1', value: 'rOption1' },
    { key: 'Option 2', value: 'rOption2' },
    { key: 'Option 3', value: 'rOption3' }
  ]

  const checkboxOptions = [
    { key: 'Option 1', value: 'cOption1' },
    { key: 'Option 2', value: 'cOption2' },
    { key: 'Option 3', value: 'cOption3' }
  ]

  const initialValues = {
    email: '',
    description: '',
    selectOption: '',
    radioOption: '',
    checkboxOption: [],
    birthDate: null
  }

  const validationSchema = Yup.object({
    email: Yup.string().required('Required'),
    description: Yup.string().required('Required'),
    selectOption: Yup.string().required('Required'),
    radioOption: Yup.string().required('Required'),
    checkboxOption: Yup.array().min(1, 'Required'),
    birthDate: Yup.date().required('Required').nullable()
  })

  const onSubmit = (values) => {
    console.log('Form values', values)
    alert(`Form submitted successFully`)
  }

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (props) => {
        return (
          <Form>
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='textarea'
              name='description'
              label='Description'
            />

            <FormikControl
              control='select'
              name='selectOption'
              label='Select a Topic'
              options={dropDownOptions}
            />

            <FormikControl
              control='radio'
              name='radioOption'
              label='Radio Topic'
              options={radioOptions}
            />

            <FormikControl
              control='checkbox'
              name='checkboxOption'
              label='CheckBox Topics'
              options={checkboxOptions}
            />

            <FormikControl
              control='date'
              name='birthDate'
              label='Pick a Date'
            />

            <button type='submit'> Submit </button>
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default FormikContainer

FormikControl.js
--------------------

import React from 'react'
import Input from './Input'
import RadioButtons from './RadioButtons'
import Select from './Select'
import TextArea from './TextArea'
import CheckBoxGroup from './CheckBoxGroup'
import DatePicker from './DatePicker'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
      return <RadioButtons {...rest} />
    case 'checkbox':
      return <CheckBoxGroup {...rest} />
    case 'date':
      return <DatePicker {...rest} />
    default:
      return null
  }
}

export default FormikControl

DatePicker.js
----------------
const { field, form } = props

const { value } = field  -> This basically gives the value of the datepicker at any given time.

const { setFieldValue } = form

setFieldValue( ) -> This method we get from form props, it allows us to programatically set a Field's value in the Formik state.

-----------------------------------------------------------------

import React from 'react'
import DateView from 'react-datepicker'
import 'react-datepicker/dist/react-datepicker.css'
import { Field, ErrorMessage } from 'formik'
import TextError from './TextError'

function DatePicker (props) {
  const { label, name, ...rest } = props
  console.log('Cheking props', props);
  console.log('Checking rest', rest);
  return (
    <div className='form-control'>
      <label htmlFor={name}> {label} </label>
      <Field name={name}>
          {
              (props) => {
                  console.log(props);
                  const { field, form } = props
                  const { value } = field
                  const { setFieldValue } = form
                  return <DateView
                          id={name}
                          {...field}
                          {...rest}
                          selected={value}
                          onChange={(updatedDate) => setFieldValue(name, updatedDate)} />
              }
          }
      </Field>

      <ErrorMessage name={name} component={TextError}/>
    </div>
  )
}

export default DatePicker

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

39) Login form ( Folder -> LoginForm, file -> LoginForm.js)
==========================================

We used previously made input.js and FormikControl.js for this LoginForm too. We are able to use them both because they are re-usable
and the reason for that is they are not simply Hard Coded.

LoginForm.js
----------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from '../FormikControl'

const initialValues = {
  email: '',
  password: ''
}

const validationSchema = Yup.object({
  email: Yup.string()
    .email('Invalid e-mail format')
    .required('Required'),
  password: Yup.string().required('Required')
})

const onSubmit = (values, onSubmitProps) => {
  console.log('Form data', values)
  alert(`Form Submitted successfully`)
  onSubmitProps.resetForm()
}

function LoginForm (props) {
  const { label, name, ...rest } = props
  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      {
            (formikProps) => {
                return <Form>

                    <FormikControl
                     control='input'
                     type='email'
                     name='email'
                     label='E-mail'
                    />

                   <FormikControl
                     control='input'
                     type='password'
                     name='password'
                     label='Password'
                    />

                    <button
                     type='submit'
                     disabled={!formikProps.isValid}
                     >
                     Submit </button>
                </Form>
            }
        }
    </Formik>
  )
}

export default LoginForm


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

40) RegistrationForm ( Folder -> RegistrationForm, file -> RegistrationForm.js)
=========================================================

We used previously made input.js, RadioBuutons.js and FormikControl.js for this LoginForm too. We are able to use them both because 
they are re-usable and the reason for that is they are not simply Hard Coded.

RegistrationForm.js
-------------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from '../FormikControl'

const initialValues = {
  email: '',
  password: '',
  confirmPassword: '',
  modeOfContact: '',
  phone: ''
}

const options = [
  { key: 'Email', value: 'emailModeOfContact' },
  { key: 'Telephone', value: 'telephoneModeOfContact' }
]

const validationSchema = Yup.object({
  email: Yup.string()
    .email('Invalid email format')
    .required('Required'),

  password: Yup.string().required('Required'),

  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password'), ''], 'Passwords must match')
    .required('Required'),

  modeOfContact: Yup.string().required('Required'),

  phone: Yup.string().when('modeOfContact', {
    is: 'telephoneModeOfContact',
    then: Yup.string().required('Required')
  })
})

const onSubmit = (values, onSubmitProps) => {
  console.log('Form data', values)
  alert(`Form Submitted Successfully`)
  onSubmitProps.resetForm()
}

function RegistrationForm () {
  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (formikProps) => {
        return (
          <Form>

            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl
              control='input'
              type='password'
              name='password'
              label='Password'
            />

            <FormikControl
              control='input'
              type='password'
              name='confirmPassword'
              label='Confirm Password'
            />

            <FormikControl
              control='radio'
              name='modeOfContact'
              label='Mode of contact'
              options={options}
            />

            <FormikControl
              control='input'
              type='text'
              name='phone'
              label='Phone Number'
            />

            <button type='submit' disabled={!formikProps.isValid}>
              Submit
            </button>
            
          </Form>
        )
      }
    }
    </Formik>
  )
}

export default RegistrationForm


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


41) Course Enrollment Form ( Folder ->  CourseEnrollmentForm, file -> CourseEnrollmentForm.js)
===================================================================

We used previously made input.js, select.js, CheckBoxGroup.js, DatePicker.js and FormikControl.js for this LoginForm too. We are able to 
use them both because they are re-usable and the reason for that is they are not simply Hard Coded.

EnrollmentForm.js
----------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from '../FormikControl'

const initialValues = {
  email: '',
  bio: '',
  course: '',
  skills: [],
  courseDate: null
}

const dropDownOptions = [
  { key: '-- Select a course --', value: '' },
  { key: 'React', value: 'react' },
  { key: 'Angular', value: 'angular' },
  { key: 'Vue', value: 'vue' }
]

const checkboxOptions = [
  { key: 'HTML', value: 'html' },
  { key: 'CSS', value: 'css' },
  { key: 'JavaScript', value: 'javascript' }
]

const validationSchema = Yup.object({
  email: Yup.string()
    .email('Invalid email format')
    .required('Required'),

  bio: Yup.string().required('Required'),
  course: Yup.string().required('Required'),
  skills: Yup.array().min(1, 'Atleast One skill Required'),

  courseDate: Yup.date()
    .required('Required')
    .nullable()
})

const onSubmit = (values, onSubmitProps) => {
  console.log('Course Enrollment Form data', values)
  alert(`Enrollment form submitted successfully`)
  onSubmitProps.resetForm()
}

function EnrollmentForm () {
  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
    {
      (formikProps) => {
        return (
          <Form>
              
            <FormikControl
              control='input'
              type='email'
              name='email'
              label='Email'
            />

            <FormikControl control='textarea' name='bio' label='Bio' />

            <FormikControl
              control='select'
              name='course'
              label='Course'
              options={dropDownOptions}
            />

            <FormikControl
              control='checkbox'
              name='skills'
              label='Ypur SkillSet'
              options={checkboxOptions}
            />

            <FormikControl
              control='date'
              type='email'
              name='courseDate'
              label='Course Date'
            />

            <button type='submit' disabled={!formikProps.isValid}>
              Submit
            </button>

          </Form>
        )
      }
    }
    </Formik>
  )
}

export default EnrollmentForm


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

42, 43) Wiring up a UI library ( Chakra UI ) & ChakraInput
========================================

1) link -> https://chakra-ui.com

2) to install -> npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^6
   old version -> npm install @chakra-ui/core @emotion/core @emotion/styled emotion-theming

3) To import in index.js -> 
---------------------------------

import { ChakraProvider } from '@chakra-ui/react'

ReactDOM.render(
  <React.StrictMode>
    <ChakraProvider>
      <App />
    </ChakraProvider>
  </React.StrictMode>,
  document.getElementById('root')
)

4) In ChakraInput.js file ->
----------------------------------

import {
  FormControl,
  FormLabel,
  FormErrorMessage,
} from '@chakra-ui/react'

ChakraInput.js
------------------

import React from 'react'
import { Field } from 'formik'
import { Input } from '@chakra-ui/react'
import {
  FormControl,
  FormLabel,
  FormErrorMessage,
} from '@chakra-ui/react'

function ChakraInput (props) {
  const { label, name, ...rest } = props
  return (
    <Field name={name}>
      {props => {
        const { field, form } = props

        return (
          <FormControl isInvalid={form.errors[name] && form.touched[name]}>
            <FormLabel htmlFor={name}> {label} </FormLabel>
            <Input id={name} {...rest} {...field} />
            <FormErrorMessage> {form.errors[name]} </FormErrorMessage>
          </FormControl>
        )
      }}
    </Field>
  )
}

export default ChakraInput


FormikControl.js:- ( add an new case for 'chakrainput' at the last before default case)
------------------------------------------------------------------------------------------------

import React from 'react'
import Input from './Input'
import RadioButtons from './RadioButtons'
import Select from './Select'
import TextArea from './TextArea'
import CheckBoxGroup from './CheckBoxGroup'
import DatePicker from './DatePicker'
import ChakraInput from './ChakraInput/ChakraInput'

function FormikControl (props) {
  const { control, ...rest } = props

  switch (control) {
    case 'input':
      return <Input {...rest} />
    case 'textarea':
      return <TextArea {...rest} />
    case 'select':
      return <Select {...rest} />
    case 'radio':
      return <RadioButtons {...rest} />
    case 'checkbox':
      return <CheckBoxGroup {...rest} />
    case 'date':
      return <DatePicker {...rest} />
    case 'chakrainput':
      return <ChakraInput {...rest} />
    default:
      return null
  }
}

export default FormikControl

LoginForm2.js
-------------------

We make a copy of LoginForm.js and just do some changes as,

1) control='chakrainput'
2) import { Button } from '@chakra-ui/react'
3) Comment out the code for designing of input and label in app.css.
3) use ChakraUI for button instead of a normal button.

example
-----------

                    <Button
                     type='submit'
                     colorScheme='red'
                     disabled={!formikProps.isValid}
                     >
                     Submit </Button>

final code in LoginForm2.js
--------------------------------

import React from 'react'
import { Formik, Form } from 'formik'
import * as Yup from 'yup'
import FormikControl from '../FormikControl'
import { Button } from '@chakra-ui/react'

const initialValues = {
  email: '',
  password: ''
}

const validationSchema = Yup.object({
  email: Yup.string()
    .email('Invalid e-mail format')
    .required('Required'),
  password: Yup.string().required('Required')
})

const onSubmit = (values, onSubmitProps) => {
  console.log('Login Form data', values)
  alert(` Login Form Submitted successfully`)
  onSubmitProps.resetForm()
}

function LoginFormTwo (props) {
  const { label, name, ...rest } = props
  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={onSubmit}
    >
      {
            (formikProps) => {
                return <Form>

                    <FormikControl
                     control='chakrainput'
                     type='email'
                     name='email'
                     label='E-mail'
                    />

                   <FormikControl
                     control='chakrainput'
                     type='password'
                     name='password'
                     label='Password'
                    />   <br />

                    <Button
                     type='submit'
                     colorScheme='red'
                     disabled={!formikProps.isValid}
                     >
                     Submit </Button>

                </Form>
            }
        }
    </Formik>
  )
}

export default LoginFormTwo




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
















